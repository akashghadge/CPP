/*
Given a string return all unique possible subsequences which start with vowel and end with consonant. A String is a subsequence of a given String, that is generated by deleting some character of a given string without changing its order.
NOTE: Return all the unique subsequences in lexicographically sorted order. 

Example 1:

Input: S = "abc"
Output: "ab", "ac", "abc" 
Explanation: "ab", "ac", "abc" are 
the all possible subsequences which 
start with vowel and end with consonant.
Example 2:

Input: S = "aab"
Output: "ab", "aab"
Explanation: "ab", "aab" are the all 
possible subsequences which start 
with vowel and end with consonant.

Your Task:  
You dont need to read input or print anything. Complete the function allPossileSubsequences() which takes S as input parameter and returns all possible subsequences which start with vowel and end with consonant.

Expected Time Complexity: O(n*logn*2n)
Expected Auxiliary Space: O(2n)

Constraints:
1<= |S| <=18


*/
#include <bits/stdc++.h>
using namespace std;
#define en "\n"
#define vi vector<int>
#define vll vector<ll>
#define ll long long
#define FAST                          \
    ios_base::sync_with_stdio(false); \
    cin.tie(NULL);
class Solution
{
public:
    void isVowel(set<string> &res, vector<string> sub)
    {
        unordered_map<char, int> vowel;
        vowel['a'] = 1;
        vowel['e'] = 1;
        vowel['i'] = 1;
        vowel['o'] = 1;
        vowel['u'] = 1;
        for (auto val : sub)
        {
            if (vowel.find(val[0]) != vowel.end() && vowel.find(val[val.size() - 1]) == vowel.end())
            {
                res.insert(val);
            }
        }
    }

    set<string> allPossibleSubsequences(string S)
    {
        // code here
        set<string> res;
        vector<string> sub;
        int cs = pow(2, S.size());
        for (int i = 0; i < cs; i++)
        {
            int temp = i;
            int pos = 0;
            string ts = "";
            while (temp)
            {
                if ((temp & 1) == 1)
                {
                    ts.push_back(S[pos]);
                }
                pos++;
                temp = temp >> 1;
            }
            sub.push_back(ts);
        }
        isVowel(res, sub);
        return res;
    }
};
int main()
{
    FAST;

    return 0;
}